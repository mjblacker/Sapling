name: sapling
recipe: wordpress
config:
  webroot: wp
  php: '8.2'
  composer_version: 2-latest

services:
  appserver:
    run_as_root:
      - apt-get update
      - apt-get install zip dos2unix
      - dos2unix /app/scripts/setup-wordpress.sh
      - chmod +x /app/scripts/setup-wordpress.sh

    run:
      - cd $LANDO_MOUNT && composer install
      #- cd $LANDO_MOUNT && scripts/setup-wordpress.sh
      - echo "To set up WordPress, run 'lando install' if you have not already done so."

    overrides:
      environment:
        # Pass any non-empty CI envvar from the host into Lando
        # This is so we can force non-interactive mode setting up WP
        CI: ${CI:-''}

  database:
    type: mysql

  phpmyadmin:
    type: phpmyadmin
    hosts:
      - database

  node:
    type: node:20

    ports:
      - 3012:3012

    globals:
      npm: "latest"

    run:
      - 'npm install'

tooling:
  install:
    service: appserver
    cmd: '/app/scripts/setup-wordpress.sh'
    description: 'Install and configure WordPress for custom theme dev'

  wp:
    service: appserver

  composer:
    service: appserver

  npm:
    service: node

  dev-debug:
    service: node
    cmd: 'DEBUG="vite:*" npm run dev'

  dev:
    service: node
    cmd: 'npm run dev'

  build:
    service: node
    cmd: 'npm run build'
    description: 'Build the theme assets for production'

  bundle:
    service: node
    cmd: 'npm run bundle'
    description: 'Build and Bundle the theme ready for deployment as a theme zip'

  debug:
    service: appserver
    cmd: 'tail -f /app/wp/wp-content/debug.log'
    description: 'Get real-time WP debug log output'

  # Update this to the URL's needed for your install when loading existing data
  update-urls:
    service: appserver
    cmd:
      - wp search-replace '%old_url%' '%lando_url%'

  create-admin:
    service: appserver
    cmd:
      - |
        # This script checks for an 'sapling' user and creates it if it doesn't exist.

        # 1. Use 'wp user get' to check if the 'sapling' user exists.
        # We redirect stdout and stderr to /dev/null to keep the output clean.
        wp user get sapling >/dev/null 2>&1

        # 2. Check the exit code ($?). A non-zero code means the command failed,
        # which in this case means the user was not found.
        if [ $? -ne 0 ]; then
          echo "Admin user 'sapling' not found. Creating..."
          # 3. Create the user with the specified email, role, and password.
          # The password and email are hardcoded as requested.
          wp user create sapling admin@sapling.lndo.site --role=administrator --user_pass=admin
          echo "Successfully created sapling administrator user."
        else
          # 4. If the exit code was 0, the user already exists.
          echo "Admin user 'sapling' already exists. No action needed."
        fi

